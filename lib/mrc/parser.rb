#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'
module MRC
  class Parser < Racc::Parser
##### State transition tables begin ###

racc_action_table = [
    13,    13,    14,    14,     9,     7,     8,     6,    10,     5,
    15,     1 ]

racc_action_check = [
    15,     9,    15,     9,     5,     3,     4,     2,     6,     1,
    11,     0 ]

racc_action_pointer = [
     8,     4,     7,     3,     2,    -2,     8,   nil,   nil,    -4,
   nil,     4,   nil,   nil,   nil,    -5,   nil ]

racc_action_default = [
    -9,    -9,    -9,    -9,    -9,    -4,    -9,    -1,    -2,    -9,
    17,    -3,    -6,    -7,    -8,    -9,    -5 ]

racc_goto_table = [
    12,     4,     3,    11,     2,   nil,    16 ]

racc_goto_check = [
     5,     3,     2,     4,     1,   nil,     5 ]

racc_goto_pointer = [
   nil,     4,     2,     0,    -6,    -9 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  2, 9, :_reduce_1,
  3, 10, :_reduce_2,
  3, 11, :_reduce_3,
  1, 11, :_reduce_4,
  3, 12, :_reduce_5,
  1, 12, :_reduce_6,
  1, 13, :_reduce_7,
  1, 13, :_reduce_8 ]

racc_reduce_n = 9

racc_shift_n = 17

racc_token_table = {
  false => 0,
  :error => 1,
  :EOF => 2,
  :OPEN => 3,
  :CLOSE => 4,
  :IDENT => 5,
  :WS => 6,
  :STRING => 7 }

racc_nt_base = 8

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EOF",
  "OPEN",
  "CLOSE",
  "IDENT",
  "WS",
  "STRING",
  "$start",
  "expressions",
  "mustache",
  "inMustache",
  "params",
  "param" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
 result = Mustache.new(*val) 
    result
end

def _reduce_2(val, _values, result)
 result = val[1]; 
    result
end

def _reduce_3(val, _values, result)
 result = [Id.new(val.first), val.last] 
    result
end

def _reduce_4(val, _values, result)
 result = Id.new(val.first) 
    result
end

def _reduce_5(val, _values, result)
 result = val.first.push val.last 
    result
end

def _reduce_6(val, _values, result)
 result = Param.new(val.first) 
    result
end

def _reduce_7(val, _values, result)
 result = Id.new(val.first) 
    result
end

def _reduce_8(val, _values, result)
 result = String.new(val.first) 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
  end   # module MRC
